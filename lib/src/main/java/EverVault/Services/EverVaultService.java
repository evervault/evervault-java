/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package EverVault.Services;

import EverVault.Contracts.IProvideCagePublicKeyFromEndpoint;
import EverVault.Contracts.IProvideECPublicKey;
import EverVault.Contracts.IProvideEncryptionForObject;
import EverVault.Contracts.IProvideSharedKey;
import EverVault.Exceptions.HttpFailureException;
import EverVault.Exceptions.NotPossibleToHandleDataTypeException;
import EverVault.Exceptions.UndefinedDataException;
import org.bouncycastle.crypto.InvalidCipherTextException;

import java.io.IOException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.security.spec.InvalidKeySpecException;

public class EverVaultService {
    protected IProvideCagePublicKeyFromEndpoint cagePublicKeyFromEndpointProvider;
    protected IProvideECPublicKey ecPublicKeyProvider;
    protected IProvideSharedKey sharedKeyProvider;
    protected IProvideEncryptionForObject encryptionProvider;

    protected byte[] generatedEcdhKey;
    protected byte[] sharedKey;

    protected static final String EVERVAULT_BASE_URL = "https://api.evervault.com/";

    protected void setupKeyProviders(IProvideCagePublicKeyFromEndpoint cagePublicKeyFromEndpointProvider,
                            IProvideECPublicKey ecPublicKeyProvider,
                            IProvideSharedKey sharedKeyProvider) throws HttpFailureException, InvalidAlgorithmParameterException, IOException, NoSuchAlgorithmException, InvalidKeySpecException, InvalidKeyException, InterruptedException {
        this.cagePublicKeyFromEndpointProvider = cagePublicKeyFromEndpointProvider;
        this.ecPublicKeyProvider = ecPublicKeyProvider;
        this.sharedKeyProvider = sharedKeyProvider;

        setupKeys();
    }

    protected void setupEncryption(IProvideEncryptionForObject encryptionProvider) {
        if (encryptionProvider == null) {
            throw new NullPointerException(IProvideSharedKey.class.getName());
        }

        this.encryptionProvider = encryptionProvider;
    }

    private void setupKeys() throws HttpFailureException, IOException, InterruptedException, NoSuchAlgorithmException, InvalidKeySpecException, InvalidAlgorithmParameterException, InvalidKeyException {
        if (cagePublicKeyFromEndpointProvider == null) {
            throw new NullPointerException(IProvideCagePublicKeyFromEndpoint.class.getName());
        }

        if (ecPublicKeyProvider == null) {
            throw new NullPointerException(IProvideECPublicKey.class.getName());
        }

        if (sharedKeyProvider == null) {
            throw new NullPointerException(IProvideSharedKey.class.getName());
        }

        var teamEcdhKey = cagePublicKeyFromEndpointProvider.getCagePublicKeyFromEndpoint(EVERVAULT_BASE_URL);

        var teamKey = ecPublicKeyProvider.getEllipticCurvePublicKeyFrom(teamEcdhKey.ecdhKey);

        var generated = sharedKeyProvider.generateSharedKeyBasedOn(teamKey);

        this.sharedKey = generated.SharedKey;
        this.generatedEcdhKey = generated.GeneratedEcdhKey;
    }

    public Object encrypt(Object data) throws NotPossibleToHandleDataTypeException, InvalidCipherTextException, IOException, UndefinedDataException {
        if (data == null) {
            throw new UndefinedDataException();
        }

        return this.encryptionProvider.encrypt(data);
    }
}
