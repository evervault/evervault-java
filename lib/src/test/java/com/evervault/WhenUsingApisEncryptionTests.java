/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.evervault;

import com.evervault.contracts.*;
import com.evervault.exceptions.Asn1EncodingException;
import com.evervault.exceptions.EvervaultException;
import com.evervault.exceptions.HttpFailureException;
import com.evervault.exceptions.NotImplementedException;
import com.evervault.exceptions.NotPossibleToHandleDataTypeException;
import com.evervault.models.CagePublicKey;
import com.evervault.models.GeneratedSharedKey;
import com.evervault.services.EvervaultService;
import com.evervault.utils.EcdhCurve;
import org.junit.jupiter.api.Test;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;

import java.io.IOException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.time.Instant;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

class WhenUsingApisEncryptionTests {
    private final IProvideCagePublicKeyFromHttpApi cagePublicKeyProvider;
    private final IProvideECPublicKey ecPublicKeyProvider;
    private final IProvideSharedKey sharedKeyProvider;
    private final IProvideEncryptionForObject encryptionForObjects;
    private final IProvideCageExecution cageExecutionProvider;
    private final Evervault everVaultService;
    private final CircuitBreakerInternal circuitBreakerProvider;
    private final IProvideTime timeProvider;

    private class Evervault extends EvervaultService {
        public void setupWrapper(IProvideCagePublicKeyFromHttpApi cagePublicKeyFromEndpointProvider,
                                 IProvideECPublicKey ecPublicKeyProvider,
                                 IProvideSharedKey sharedKeyProvider,
                                 IProvideEncryptionForObject encryptionProvider,
                                 IProvideCageExecution cageExecutionProvider,
                                 IProvideCircuitBreaker circuitBreakerProvider,
                                 IProvideTime timeProvider,
                                 EcdhCurve ecdhCurve) throws EvervaultException {
            this.setupCircuitBreaker(circuitBreakerProvider);
            this.setupCageExecutionProvider(cageExecutionProvider);
            this.setupKeyProviders(cagePublicKeyFromEndpointProvider, ecPublicKeyProvider, sharedKeyProvider, timeProvider, ecdhCurve);
            this.setupEncryption(encryptionProvider);
        }
    }

    private static class CircuitBreakerInternal implements IProvideCircuitBreaker {
        @Override
        public <TReturn> TReturn execute(int methodIdentifier, IExecute<TReturn> executable) throws NotPossibleToHandleDataTypeException, HttpFailureException, IOException, InterruptedException {
            return executable.execute();
        }
    }

    public WhenUsingApisEncryptionTests() {
        cagePublicKeyProvider = mock(IProvideCagePublicKeyFromHttpApi.class);
        ecPublicKeyProvider = mock(IProvideECPublicKey.class);
        sharedKeyProvider = mock(IProvideSharedKey.class);
        encryptionForObjects = mock(IProvideEncryptionForObject.class);
        cageExecutionProvider = mock(IProvideCageExecution.class);
        circuitBreakerProvider = new CircuitBreakerInternal();
        everVaultService = new Evervault();
        timeProvider = mock(IProvideTime.class);
    }

    @Test
    void creatingANewServiceDoesNotThrow() throws Asn1EncodingException, HttpFailureException, InvalidAlgorithmParameterException, IOException, NoSuchAlgorithmException, InvalidKeyException, InterruptedException, NotImplementedException, EvervaultException {
        var cagePublicKey = new CagePublicKey();
        cagePublicKey.ecdhKey = "teamEcdhKey";
        cagePublicKey.key = "key";
        cagePublicKey.teamUuid = "teamUuid";

        var generated = new GeneratedSharedKey();
        generated.SharedKey = new byte[]{};
        generated.SharedKey = new byte[]{};

        when(timeProvider.GetNow()).thenReturn(Instant.now());
        when(cagePublicKeyProvider.getCagePublicKeyFromEndpoint(any())).thenReturn(cagePublicKey);
        when(sharedKeyProvider.generateSharedKeyBasedOn(any())).thenReturn(generated);

        everVaultService.setupWrapper(cagePublicKeyProvider, ecPublicKeyProvider, sharedKeyProvider, encryptionForObjects, cageExecutionProvider, circuitBreakerProvider, timeProvider, EcdhCurve.SECP256K1);
    }

    @Test
    void newKeyMustBeGeneratedIf15MinutesHavePassed() throws Asn1EncodingException, HttpFailureException, IOException, InterruptedException, InvalidAlgorithmParameterException, NoSuchAlgorithmException, InvalidKeyException, NotImplementedException, EvervaultException {
        var cagePublicKey = new CagePublicKey();
        cagePublicKey.ecdhKey = "teamEcdhKey";
        cagePublicKey.key = "key";
        cagePublicKey.teamUuid = "teamUuid";

        var generated = new GeneratedSharedKey();
        generated.SharedKey = new byte[]{};
        generated.SharedKey = new byte[]{};

        when(timeProvider.GetNow()).thenAnswer(new Answer<Instant>() {
            private int nCall = 0;

            @Override
            public Instant answer(InvocationOnMock invocation) throws Throwable {
                if (nCall == 0) {
                    nCall++;
                    return Instant.ofEpochSecond(0);
                }

                return Instant.ofEpochSecond(1000);
            }
        });
        when(cagePublicKeyProvider.getCagePublicKeyFromEndpoint(any())).thenReturn(cagePublicKey);
        when(sharedKeyProvider.generateSharedKeyBasedOn(any())).thenReturn(generated);
        everVaultService.setupWrapper(cagePublicKeyProvider, ecPublicKeyProvider, sharedKeyProvider, encryptionForObjects, cageExecutionProvider, circuitBreakerProvider, timeProvider, EcdhCurve.SECP256K1);

        everVaultService.encrypt("Foo");

        verify(timeProvider, times(3)).GetNow();
        verify(sharedKeyProvider, times(2)).generateSharedKeyBasedOn(any());
    }

    @Test
    void tryingToEncryptNullThrows() throws Asn1EncodingException, HttpFailureException, InvalidAlgorithmParameterException, IOException, NoSuchAlgorithmException, InvalidKeyException, InterruptedException, NotImplementedException, EvervaultException {
        var cagePublicKey = new CagePublicKey();
        cagePublicKey.ecdhKey = "teamEcdhKey";
        cagePublicKey.key = "key";
        cagePublicKey.teamUuid = "teamUuid";

        var generated = new GeneratedSharedKey();
        generated.SharedKey = new byte[]{};
        generated.SharedKey = new byte[]{};

        when(timeProvider.GetNow()).thenReturn(Instant.now());
        when(cagePublicKeyProvider.getCagePublicKeyFromEndpoint(any())).thenReturn(cagePublicKey);
        when(sharedKeyProvider.generateSharedKeyBasedOn(any())).thenReturn(generated);

        everVaultService.setupWrapper(cagePublicKeyProvider, ecPublicKeyProvider, sharedKeyProvider, encryptionForObjects, cageExecutionProvider, circuitBreakerProvider, timeProvider, EcdhCurve.SECP256K1);
        assertThrows(EvervaultException.class, () -> everVaultService.encrypt(null));
    }

    @Test
    void newInstanceThrowsSpecificExceptionForLackingParameter() {
        assertThrows(NullPointerException.class, () -> everVaultService.setupWrapper(null, ecPublicKeyProvider, sharedKeyProvider, encryptionForObjects, cageExecutionProvider, circuitBreakerProvider, timeProvider, EcdhCurve.SECP256K1));
        assertThrows(NullPointerException.class, () -> everVaultService.setupWrapper(cagePublicKeyProvider, null, sharedKeyProvider, encryptionForObjects, cageExecutionProvider, circuitBreakerProvider, timeProvider, EcdhCurve.SECP256K1));
        assertThrows(NullPointerException.class, () -> everVaultService.setupWrapper(cagePublicKeyProvider, ecPublicKeyProvider, null, encryptionForObjects, cageExecutionProvider, circuitBreakerProvider, timeProvider, EcdhCurve.SECP256K1));
        assertThrows(NullPointerException.class, () -> everVaultService.setupWrapper(cagePublicKeyProvider, ecPublicKeyProvider, sharedKeyProvider, encryptionForObjects, cageExecutionProvider, null, timeProvider, EcdhCurve.SECP256K1));
        assertThrows(NullPointerException.class, () -> everVaultService.setupWrapper(cagePublicKeyProvider, ecPublicKeyProvider, sharedKeyProvider, encryptionForObjects, cageExecutionProvider, circuitBreakerProvider, null, EcdhCurve.SECP256K1));
        assertThrows(NullPointerException.class, () -> {
            everVaultService.setupWrapper(cagePublicKeyProvider, ecPublicKeyProvider, sharedKeyProvider, null, cageExecutionProvider, circuitBreakerProvider, timeProvider, EcdhCurve.SECP256K1);
            everVaultService.encrypt("Foo");
        });
    }

    @Test
    void encryptionReturnsCorrectData() throws Exception {
        final var someString = "Foo";
        final var encryptedString = "Bar";

        var cagePublicKey = new CagePublicKey();
        cagePublicKey.ecdhKey = "teamEcdhKey";
        cagePublicKey.key = "key";
        cagePublicKey.teamUuid = "teamUuid";

        var generated = new GeneratedSharedKey();
        generated.SharedKey = new byte[]{};
        generated.SharedKey = new byte[]{};

        when(timeProvider.GetNow()).thenReturn(Instant.now());
        when(cagePublicKeyProvider.getCagePublicKeyFromEndpoint(any())).thenReturn(cagePublicKey);
        when(sharedKeyProvider.generateSharedKeyBasedOn(any())).thenReturn(generated);
        when(encryptionForObjects.encrypt(any())).thenReturn(encryptedString);

        everVaultService.setupWrapper(cagePublicKeyProvider, ecPublicKeyProvider, sharedKeyProvider, encryptionForObjects, cageExecutionProvider, circuitBreakerProvider, timeProvider, EcdhCurve.SECP256K1);

        var result = (String) everVaultService.encrypt(someString);

        assert result.equals(encryptedString);
    }
}
