/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package EverVault;

import EverVault.Contracts.IProvideCagePublicKeyFromEndpoint;
import EverVault.Contracts.IProvideECPublicKey;
import EverVault.Contracts.IProvideEncryptionForObject;
import EverVault.Contracts.IProvideSharedKey;
import EverVault.Exceptions.HttpFailureException;
import EverVault.Exceptions.UndefinedDataException;
import EverVault.ReadModels.CagePublicKey;
import EverVault.ReadModels.GeneratedSharedKey;
import EverVault.Services.EverVaultService;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

class WhenUsingApisEncryptionTests {
    private final IProvideCagePublicKeyFromEndpoint cagePublicKeyProvider;
    private final IProvideECPublicKey ecPublicKeyProvider;
    private final IProvideSharedKey sharedKeyProvider;
    private final IProvideEncryptionForObject encryptionForObjects;
    private final EverVault everVaultService;

    private class EverVault extends EverVaultService {
        public void setupWrapper(IProvideCagePublicKeyFromEndpoint cagePublicKeyFromEndpointProvider,
                             IProvideECPublicKey ecPublicKeyProvider,
                             IProvideSharedKey sharedKeyProvider,
                             IProvideEncryptionForObject encryptionProvider) throws HttpFailureException, InvalidAlgorithmParameterException, IOException, NoSuchAlgorithmException, InvalidKeySpecException, InvalidKeyException, InterruptedException {
            this.setupKeyProviders(cagePublicKeyFromEndpointProvider, ecPublicKeyProvider, sharedKeyProvider);
            this.setupEncryption(encryptionProvider);
        }
    }

    public WhenUsingApisEncryptionTests() {
        cagePublicKeyProvider = mock(IProvideCagePublicKeyFromEndpoint.class);
        ecPublicKeyProvider = mock(IProvideECPublicKey.class);
        sharedKeyProvider = mock(IProvideSharedKey.class);
        encryptionForObjects = mock(IProvideEncryptionForObject.class);
        everVaultService = new EverVault();
    }

    @Test
    void creatingANewServiceDoesNotThrow() throws HttpFailureException, InvalidAlgorithmParameterException, IOException, NoSuchAlgorithmException, InvalidKeySpecException, InvalidKeyException, InterruptedException {
        var cagePublicKey = new CagePublicKey();
        cagePublicKey.ecdhKey = "ecdhKey";
        cagePublicKey.key = "key";
        cagePublicKey.teamUuid = "teamUuid";

        var generated = new GeneratedSharedKey();
        generated.SharedKey = new byte[] {};
        generated.SharedKey = new byte[] {};

        when(cagePublicKeyProvider.getCagePublicKeyFromEndpoint(any())).thenReturn(cagePublicKey);
        when(sharedKeyProvider.generateSharedKeyBasedOn(any())).thenReturn(generated);

        everVaultService.setupWrapper(cagePublicKeyProvider, ecPublicKeyProvider, sharedKeyProvider, encryptionForObjects);
    }

    @Test
    void tryingToEncryptNullThrows() throws HttpFailureException, InvalidAlgorithmParameterException, IOException, NoSuchAlgorithmException, InvalidKeySpecException, InvalidKeyException, InterruptedException {
        var cagePublicKey = new CagePublicKey();
        cagePublicKey.ecdhKey = "ecdhKey";
        cagePublicKey.key = "key";
        cagePublicKey.teamUuid = "teamUuid";

        var generated = new GeneratedSharedKey();
        generated.SharedKey = new byte[] {};
        generated.SharedKey = new byte[] {};

        when(cagePublicKeyProvider.getCagePublicKeyFromEndpoint(any())).thenReturn(cagePublicKey);
        when(sharedKeyProvider.generateSharedKeyBasedOn(any())).thenReturn(generated);

        everVaultService.setupWrapper(cagePublicKeyProvider, ecPublicKeyProvider, sharedKeyProvider, encryptionForObjects);
        assertThrows(UndefinedDataException.class, () -> everVaultService.encrypt(null));
    }

    @Test
    void newInstanceThrowsSpecificExceptionForLackingParameter() {
        assertThrows(NullPointerException.class, () -> everVaultService.setupWrapper(null, ecPublicKeyProvider, sharedKeyProvider, encryptionForObjects));
        assertThrows(NullPointerException.class, () -> everVaultService.setupWrapper(cagePublicKeyProvider, null, sharedKeyProvider, encryptionForObjects));
        assertThrows(NullPointerException.class, () -> everVaultService.setupWrapper(cagePublicKeyProvider, ecPublicKeyProvider, null, encryptionForObjects));
        assertThrows(NullPointerException.class, () -> {
            everVaultService.setupWrapper(cagePublicKeyProvider, ecPublicKeyProvider, sharedKeyProvider, null);
            everVaultService.encrypt("Foo");
        });
    }

    @Test
    void encryptionReturnsCorrectData() throws Exception {
        final var someString = "Foo";
        final var encryptedString = "Bar";

        var cagePublicKey = new CagePublicKey();
        cagePublicKey.ecdhKey = "ecdhKey";
        cagePublicKey.key = "key";
        cagePublicKey.teamUuid = "teamUuid";

        var generated = new GeneratedSharedKey();
        generated.SharedKey = new byte[] {};
        generated.SharedKey = new byte[] {};

        when(cagePublicKeyProvider.getCagePublicKeyFromEndpoint(any())).thenReturn(cagePublicKey);
        when(sharedKeyProvider.generateSharedKeyBasedOn(any())).thenReturn(generated);
        when(encryptionForObjects.encrypt(any())).thenReturn(encryptedString);

        everVaultService.setupWrapper(cagePublicKeyProvider, ecPublicKeyProvider, sharedKeyProvider, encryptionForObjects);

        var result = (String) everVaultService.encrypt(someString);

        assert result.equals(encryptedString);
    }
}
