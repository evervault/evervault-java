/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package EverVault;

import EverVault.Contracts.IProvideCagePublicKey;
import EverVault.Contracts.IProvideEncryptionForObject;
import EverVault.Exceptions.UndefinedDataException;
import EverVault.ReadModels.CagePublicKey;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

class WhenUsingApisEncryptionTests {
    private final IProvideCagePublicKey cagePublicKeyProvider;
    private final IProvideEncryptionForObject encryptionProvider;
    private final EverVault everVaultApi;

    public WhenUsingApisEncryptionTests() {
        cagePublicKeyProvider = mock(IProvideCagePublicKey.class);
        encryptionProvider = mock(IProvideEncryptionForObject.class);
        everVaultApi = new EverVault("foo", "bar", cagePublicKeyProvider, encryptionProvider);
    }

    @Test
    void tryingToEncryptNullThrows() {
        assertThrows(UndefinedDataException.class, () -> everVaultApi.encrypt(null));
    }

    @Test
    void encryptionReturnsCorrectData() throws Exception {
        final var someString = "Foo";
        final var encryptedString = "Bar";

        var cagePublicKey = new CagePublicKey();
        cagePublicKey.ecdhKey = "ecdhKey";
        cagePublicKey.key = "key";
        cagePublicKey.teamUuid = "teamUuid";

        when(cagePublicKeyProvider.getCagePublicKey(any())).thenReturn(cagePublicKey);
        when(encryptionProvider.encrypt(any())).thenReturn("Bar");

        var result = (String)everVaultApi.encrypt(someString);

        assert result.equals(encryptedString);
    }
}
